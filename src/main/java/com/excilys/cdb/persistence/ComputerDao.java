package com.excilys.cdb.persistence;

import static com.excilys.cdb.persistence.DaoUtility.preparedStatementInitialization;

import com.excilys.cdb.exception.DaoException;
import com.excilys.cdb.mapper.ComputerDaoMapper;
import com.excilys.cdb.model.Computer;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Optional;

import org.apache.log4j.Logger;

public class ComputerDao {
  static final Logger LOGGER = Logger.getLogger(ComputerDao.class);
  private DaoFactory daoFactory;
  private ComputerDaoMapper computerMapper;

  private static final String SQL_SELECT_BY_ID = 
      "SELECT id, name, introduced, discontinued, company_id FROM computer WHERE id = ?;";
  private static final String SQL_SELECT_ALL = 
      "SELECT id, name, introduced, discontinued, company_id FROM computer;";
  private static final String SQL_INSERT = 
      "INSERT INTO computer (name, introduced, discontinued, company_id) VALUES (?, ?, ?, ?)";
  private static final String SQL_DELETE = 
      "DELETE FROM computer WHERE id = ?;";
  private static final String SQL_UPDATE = 
      "UPDATE computer SET name = ?, introduced = ?, discontinued = ?, company_id = ? "
      + "WHERE id = ?;";

  ComputerDao(DaoFactory daoFactory) {
    this.daoFactory = daoFactory;
    this.computerMapper = new ComputerDaoMapper();
  }

  public ArrayList<Computer> list() throws DaoException {
    LOGGER.info("Start cxomputers listing...");
    ResultSet resultSet = null;
    ArrayList<Computer> computers = new ArrayList<Computer>();
 
    try (
        Connection connection = daoFactory.getConnection();
        PreparedStatement preparedStatement = 
             preparedStatementInitialization(connection, SQL_SELECT_ALL, false)
    ) {
      resultSet = preparedStatement.executeQuery();
      
      while (resultSet.next()) {
        computers.add(this.computerMapper.map(resultSet));
      }

    } catch (SQLException e) {
      throw new DaoException(e);
    }

    if (computers.isEmpty()) {
      LOGGER.warn("Computers list is empty.");
    } else {
      LOGGER.info("Computers list created.");
    }

    return computers;
  }

  public Optional<Computer> findById(int pid) throws DaoException {
    ResultSet resultSet = null;
    Optional<Computer> computer = null;

    try (
        Connection connection = daoFactory.getConnection();
        PreparedStatement preparedStatement = preparedStatementInitialization(connection, SQL_SELECT_BY_ID, false, pid)
    ) {
      resultSet = preparedStatement.executeQuery();

      if (resultSet.next()) {
        computer = Optional.ofNullable(this.computerMapper.map(resultSet));
      }

    } catch (SQLException e) {
      throw new DaoException(e);
    }
    
    if(computer.isPresent()) {
    	LOGGER.info("Computer " + pid + " found.");
    } else {
    	LOGGER.warn("Computer " + pid + " not found.");
    }
    
    return computer;
  }

  public void create(Computer computer) throws DaoException {
    LOGGER.info("Start computer insertion...");
    ResultSet autoGeneratedValues = null;
    
    this.checkData(computer);

    try (
        Connection connection = daoFactory.getConnection();
        PreparedStatement preparedStatement = 
              preparedStatementInitialization(connection, SQL_INSERT, true, 
                 computer.getName(), computer.getIntroduced().orElse(null),
                 computer.getDiscontinued().orElse(null), computer.getCompany().map(someCompany -> someCompany.getId()).orElse(null))
    ) {
      int statut = preparedStatement.executeUpdate();

      if (statut == 0) {
        throw new DaoException("Failed to create the computer in database, no line added in the table.");
      }

      autoGeneratedValues = preparedStatement.getGeneratedKeys();

      if (autoGeneratedValues.next()) {
        computer.setId(autoGeneratedValues.getInt(1));
      } else {
        throw new DaoException("Failed to create the computer in database, no auto-generated ID returned.");
      }

    } catch (SQLException e) {
      throw new DaoException(e);
    }

    LOGGER.info("Computer " + computer.getId() + " created.");
  }

  public void update(Computer computerUpdated) throws DaoException {
    LOGGER.info("Start computer " + computerUpdated.getId() + " update...");
    this.checkData(computerUpdated);

    try (
         Connection connection = daoFactory.getConnection();
         PreparedStatement preparedStatement = 
             preparedStatementInitialization(connection, SQL_UPDATE, false,
             computerUpdated.getName(), computerUpdated.getIntroduced().orElse(null),
             computerUpdated.getDiscontinued().orElse(null), computerUpdated.getCompany().map(someCompany -> someCompany.getId()).orElse(null), computerUpdated.getId())
    ) {
      int statut = preparedStatement.executeUpdate();

      if (statut == 0) {
        throw new DaoException("Failed to update the computer in database, no line updated in the table.");
      }

    } catch (SQLException e) {
      throw new DaoException(e);
    }

    LOGGER.info("Computer " + computerUpdated.getId() + " updated.");
  }

  public void delete(Computer computer) throws DaoException {
    try (
         Connection connection = daoFactory.getConnection();
         PreparedStatement preparedStatement = 
             preparedStatementInitialization(connection, SQL_DELETE, false, computer.getId())
    ) {
      int statut = preparedStatement.executeUpdate();

      if (statut == 0) {
        throw new DaoException("Failed to delete the computer in database, no line deleted in the table.");
      }

    } catch (SQLException e) {
      throw new DaoException(e);
    }

    LOGGER.info("Computer " + computer.getId() + " deleted.");
  }

  public void checkData(Computer computer) {
    if (computer.getName() == null) {
      throw new DaoException("Failed to create computer : Computer name is null.");
    }

    if (!computer.getIntroduced().isPresent() && computer.getDiscontinued().isPresent()) {
      throw new DaoException("Failed to create computer : Dicontinued not null whereas introcued is.");
    }

    if ( computer.getIntroduced().isPresent() && computer.getDiscontinued().isPresent()
        && !computer.getDiscontinued().get().after(computer.getIntroduced().get())){
      throw new DaoException("Failed to create computer : Discontinuation date is not after the introduction date.");
    }
  }

  public Integer getCompanyId(Computer computer) {
	return computer.getCompany().map(someCompany -> someCompany.getId()).orElse(null);
  }
}
