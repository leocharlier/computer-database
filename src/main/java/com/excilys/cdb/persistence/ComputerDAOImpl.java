package com.excilys.cdb.persistence;

import java.sql.*;
import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.excilys.cdb.persistence.DAOUtility.*;

import com.excilys.cdb.mapper.ComputerMapper;
import com.excilys.cdb.model.Computer;

public class ComputerDAOImpl implements ComputerDAO {
	private DAOFactory daoFactory;
	private ComputerMapper computerMapper;
	final static Logger logger = LoggerFactory.getLogger( "com.excilys.cdb.persistence.ComputerDAOImpl" );
	
	private static final String SQL_SELECT_BY_ID = "SELECT id, name, introduced, discontinued, company_id FROM computer WHERE id = ?;";
	private static final String SQL_SELECT_ALL = "SELECT id, name, introduced, discontinued, company_id FROM computer;";
	private static final String SQL_INSERT = "INSERT INTO computer (name, introduced, discontinued, company_id) VALUES (?, ?, ?, ?)";
	private static final String SQL_DELETE = "DELETE FROM computer WHERE id = ?;";
	private static final String SQL_UPDATE = "UPDATE computer SET name = ?, introduced = ?, discontinued = ?, company_id = ? WHERE id = ?;";
	
	ComputerDAOImpl( DAOFactory daoFactory ) {
		this.daoFactory = daoFactory;
		this.computerMapper = new ComputerMapper();
	}

	@Override
	public ArrayList<Computer> list() throws DAOException {
		logger.info( "Start cxomputers listing..." );
	    ResultSet resultSet = null;
	    ArrayList<Computer> computers = new ArrayList<Computer>();
	    
	    try (
    		Connection connection = daoFactory.getConnection();
    		PreparedStatement preparedStatement = preparedStatementInitialization( connection, SQL_SELECT_ALL, false )
	    	) {
	    	
	        resultSet = preparedStatement.executeQuery();
	        
	        while ( resultSet.next() ) {
	        	computers.add( this.computerMapper.map( resultSet ) );
	        }
	        
	    } catch ( SQLException e ) {
			throw new DAOException( e );
		}
	    
	    if( computers.isEmpty() ) {
	    	logger.warn( "Computers list is empty." );
	    } else {
	    	logger.info( "Computers list created." );
	    }
	    
		return computers;
	}

	@Override
	public Computer find(int pId) throws DAOException {
	    ResultSet resultSet = null;
	    Computer computer = null;
	    
	    try (
    		Connection connection = daoFactory.getConnection();
    		PreparedStatement preparedStatement = preparedStatementInitialization( connection, SQL_SELECT_BY_ID, false, pId )
	    	) {
	    	
	        resultSet = preparedStatement.executeQuery();
	        
	        if ( resultSet.next() ) {
	        	computer = this.computerMapper.map( resultSet );
	        } else {
	        	throw new DAOException("No SQL result for this computer ID.");
	        }
	        
	    } catch ( SQLException e ) {
			throw new DAOException( e );
		}
	    
	    logger.info( "Computer " + pId + " found." );
	    
		return computer;
	} 

	@Override
	public void create(Computer computer) throws DAOException {
		logger.info( "Start computer insertion..." );
	    ResultSet autoGeneratedValues = null;
	    
	    this.checkData( computer );

	    try (
	    	Connection connection = daoFactory.getConnection();
	    	PreparedStatement preparedStatement = preparedStatementInitialization( connection, SQL_INSERT, true, computer.getName(), computer.getIntroduced(), computer.getDiscontinued(), this.getCompanyId( computer ) )
	    	) {
	        
	        int statut = preparedStatement.executeUpdate();

	        if ( statut == 0 ) {
	            throw new DAOException( "Failed to create the computer in database, no line added in the table." );
	        }

	        autoGeneratedValues = preparedStatement.getGeneratedKeys();

	        if ( autoGeneratedValues.next() ) {
	        	computer.setId( autoGeneratedValues.getInt( 1 ) );
	        } else {
	            throw new DAOException( "Failed to create the computer in database, no auto-generated ID returned." );
	        }
	        
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    }
	    
	    logger.info( "Computer " + computer.getId() + " created." );
	}

	@Override
	public void update(Computer computer) throws DAOException {
		logger.info( "Start computer " + computer.getId() + " update..." );
	    this.checkData( computer );

	    try (
	    	Connection connection = daoFactory.getConnection();
	    	PreparedStatement preparedStatement = preparedStatementInitialization( connection, SQL_UPDATE, false, computer.getName(), computer.getIntroduced(), computer.getDiscontinued(), this.getCompanyId( computer ), computer.getId() )
	    	) {

	        int statut = preparedStatement.executeUpdate();

	        if ( statut == 0 ) {
	            throw new DAOException( "Failed to update the computer in database, no line updated in the table." );
	        }

	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    }
	    
	    logger.info( "Computer " + computer.getId() + " updated." );
	}

	@Override
	public void delete(Computer computer) throws DAOException {
	    try (
    		Connection connection = daoFactory.getConnection();
    		PreparedStatement preparedStatement = preparedStatementInitialization( connection, SQL_DELETE, false, computer.getId() )
	    	) {
	    	
	        int statut = preparedStatement.executeUpdate();

	        if ( statut == 0 ) {
	            throw new DAOException( "Failed to delete the computer in database, no line deleted in the table." );
	        }

	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    }
	    
	    logger.info( "Computer " + computer.getId() + " deleted." );
	}
	
	public void checkData(Computer computer) {
		if( computer.getName() == null ) {
	    	throw new DAOException("Failed to create computer : Computer name is null.");
	    }
	    
	    if( computer.getIntroduced() == null && computer.getDiscontinued() != null) {
	    	throw new DAOException("Failed to create computer : Dicontinued not null whereas introcued is.");
	    }
	    
	    if( ( computer.getIntroduced() != null && computer.getDiscontinued() != null ) && !computer.getDiscontinued().after(computer.getIntroduced() ) ) {
	    	throw new DAOException("Failed to create computer : Discontinuation date is not after the introduction date.");
	    }
	}
	
	public Integer getCompanyId( Computer computer ) {
		Integer companyID = null;
    	if(computer.getCompany() != null) {
    		companyID = computer.getCompany().getId();
    	}
    	return companyID;
	}

}
